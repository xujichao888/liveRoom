<template>
	<view>
		<d-transition :mode-class="['fade']" :styles="maskClass" :show="isShow && !closeMask" @click="maskLyer"></d-transition>
		<d-transition @change="popupChange" :mode-class="popupData[direction].modeClass" :styles="popupData[direction].popupClass" :show="isShow"
		 @click="maskLyer">
			<view :style="stylePopup" @tap.stop="prevent">
				<slot></slot>
			</view>
		</d-transition>
	</view>
</template>

<script>
	/****************** 组件更新日志 ******************/
	/** 
	 *版本1.0.0
	 * 新增组件
	 */
	/****************** 属性提示 ******************/
	/**
	 * popup 弹出层组件
	 * @description 用于弹出层上、下、左、右、中
	 * @tutorial 
	 * @property {Boolean} mask-close = [true|false] 控制点击遮罩层是否可关闭
	 *  @value true 禁止点击遮罩层关闭
	 *  @value false 点击遮罩层关闭
	 * @property {Boolean} closeMask 关闭遮罩层
	 * @property {String} direction = [top|bottom|left|right|center] 弹出层方向
	 *  @value top 上
	 *  @value bottom 下
	 *  @value left 左
	 *  @value right 右
	 * 	@value center 中
	 * @value top 顶部弹出层
	 * @value bottom 底部弹出层
	 * @value left 左侧弹出层
	 * @value right 右侧弹出层
	 * @value center 中间
	 * @property {String, Number} width 弹出层宽度(限左、右、中生效)
	 */
	export default {
		name: 'dPopup',
		props: {
			show: {
				type: Boolean, //控制显示或者隐藏
				default: false
			},
			maskClose: {
				type: Boolean, //控制点击遮罩层是否可关闭
				default: true
			},
			maskTransparent: {
				type: Boolean, //控制遮罩层是否透明
				default: false
			},
			closeMask:{
				type:Boolean, //关闭遮罩层
				default:false
			},
			direction: {
				type: String, //弹出层方向
				default: "center"
			},
			width: {
				type: [String, Number], //弹出层宽度(限左、右、中生效)
				default: 550
			}
		},
		data() {
			return {
				isShow: false,
				//遮罩层
				maskClass: {
					'position': 'fixed',
					'bottom': 0,
					'top': 0,
					'left': 0,
					'right': 0,
					'backgroundColor': this.maskTransparent ? 'rgba(0, 0, 0, 0)' : 'rgba(0, 0, 0, 0.4)'
				},
				popupData: {
					top: {
						modeClass: ['slide-top', 'fade'],
						popupClass: {
							'position': 'fixed',
							'left': 0,
							'right': 0,
							'top': 0,
							'backgroundColor': '#FFFFFF'
						}
					},
					bottom: {
						modeClass: ['slide-bottom', 'fade'],
						popupClass: {
							'position': 'fixed',
							'left': 0,
							'right': 0,
							'bottom': 0,
							// 'backgroundColor': '#FFFFFF'
						}
					},
					left: {
						modeClass: ['slide-left', 'fade'],
						popupClass: {
							'position': 'fixed',
							'bottom': 0,
							'top': 0,
							'left': 0,
							'backgroundColor': '#FFFFFF'
						}
					},
					right: {
						modeClass: ['slide-right', 'fade'],
						popupClass: {
							'position': 'fixed',
							'bottom': 0,
							'top': 0,
							'right': 0,
							'backgroundColor': '#FFFFFF'
						}
					},
					center: {
						modeClass: ['fade','zoom-in'],
						popupClass: {
							'position': 'fixed',
							'bottom': 0,
							'left': 0,
							'right': 0,
							'top': 0,
							'justifyContent': 'center',
							'alignItems': 'center'
						}
					}
				}
			};
		},
		computed: {
			stylePopup() {
				let styles = {};
				switch (this.direction) {
					case "center":
						let centerWidth = {
							width: this.width + 'rpx'
						};
						styles = Object.assign(styles, centerWidth);
						break;
					case "left":
						let leftWidth = {
							width: this.width + 'rpx'
						};
						styles = Object.assign(styles, leftWidth);
						break;
					case "right":
						let rightWidth = {
							width: this.width + 'rpx'
						};
						styles = Object.assign(styles, rightWidth);
						break;
					default:
						break;
				};
				return styles;
			}
		},
		watch: {
			show: {
				handler(newVal) {
					if (newVal) {
						this.open()
					} else {
						this.close()
					}
				},
				immediate: true
			}
		},
		methods: {
			popupChange(e){
				this.$emit('change', {
					detail: e.detail
				});
			},
			/* 阻止冒泡 */
			prevent(event) {
				event.stopPropagation();
			},
			/* 打开 */
			open() {
				this.isShow = true;
			},
			/* 点击遮罩层关闭 */
			maskLyer() {
				if (this.maskClose) {
					this.$emit('closeFun') //加入关闭的回调
					this.isShow = false;
				}
			},
			/* 关闭 */
			close() {
			
				this.isShow = false;
			}
		}
	}
</script>

<style lang="scss">

</style>
